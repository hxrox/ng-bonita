{"version":3,"sources":["../../src/bdm/zgwnu-bonita-business-data.service.ts"],"names":[],"mappings":"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","file":"zgwnu-bonita-business-data.service.js","sourceRoot":"","sourcesContent":["// ZaakgerichtWerken.nu Bonita Rest Api Business Data Service\n// --------------------------------------------------------------------------\n//\n// based on http://documentation.bonitasoft.com/?page=bdm-api#\n//\nimport { Injectable } from '@angular/core'\nimport { Http, Response } from '@angular/http'\n\nimport { Observable } from 'rxjs/Observable'\nimport 'rxjs/add/operator/catch'\nimport 'rxjs/add/operator/map'\n\nimport { ZgwnuBonitaRestApiService } from '../rest-api/zgwnu-bonita-rest-api.service'\nimport { ZgwnuBonitaDataMappingInterface } from '../rest-api/zgwnu-bonita-data-mapping.interface'\nimport { ZgwnuBonitaDataMapping } from '../rest-api/zgwnu-bonita-data-mapping'\nimport { ZgwnuBonitaConfigService } from '../rest-api/zgwnu-bonita-config.service'\nimport { ZgwnuBonitaBusinessDataQueryParms } from './zgwnu-bonita-business-data-query-parms'\nimport { ZgwnuBonitaBusinessDataContext } from './zgwnu-bonita-business-data-context'\nimport { ZgwnuSingleBusinessDataRefence } from './zgwnu-single-business-data-reference'\nimport { ZgwnuMultipleBusinessDataRefence } from './zgwnu-multiple-business-data-reference'\n\n\nexport class ZgwnuBonitaBusinessDataService extends ZgwnuBonitaRestApiService {\n    private resourcePath: string = '/bdm'\n    private resourceUrl: string\n\n    constructor(\n        private configService: ZgwnuBonitaConfigService,\n        private http: Http\n    ) \n    { \n        super()\n        this.resourceUrl = configService.bonitaUrls.apiUrl + this.resourcePath\n    }\n\n    // Bonita Rest Api Business Data\n    // --------------------------------------------------------------------------\n    //\n    // based on http://documentation.bonitasoft.com/?page=bdm-api#toc0\n    //\n    // Request URL template: ../API/bdm/businessData/:businessDataType/:persistenceId\n    //\n    getBusinessData(businessDataObjectType: string, persistenceId: number, mappingParm?: ZgwnuBonitaDataMappingInterface): Observable<any> {\n        let mapping = this.getMapping(mappingParm)\n        return this.http.get(this.buildGetRequestUrl(businessDataObjectType, persistenceId), this.configService.options)\n                        .map(mapping.mapResponse)\n                        .catch(this.handleResponseError)\n    }\n\n    protected buildGetRequestUrl(businessDataObjectType: string, persistenceId: number): string {\n        return this.resourceUrl + '/businessData/' + \n                this.configService.businessDataModelPackage + '.' + businessDataObjectType + \n                    '/' + persistenceId.toString()\n    }\n\n    // Bonita Rest Api Business Data Query\n    // --------------------------------------------------------------------------\n    //\n    // based on http://documentation.bonitasoft.com/?page=bdm-api#toc1\n    //\n    // Request URL template: ../API/bdm/businessData/_businessDataType_?q=_queryName_\n    //                       &p=0&c=10&f=param=value\n    //\n    queryBusinessData(businessDataObjectType: string, queryParms: ZgwnuBonitaBusinessDataQueryParms, mappingParm?: ZgwnuBonitaDataMappingInterface): Observable<any> {\n        let mapping = this.getMapping(mappingParm)\n        return this.http.get(this.buildQueryRequestUrl(businessDataObjectType, queryParms), this.configService.options)\n                        .map(mapping.mapResponseArray)\n                        .catch(this.handleResponseError)\n    }\n\n    protected buildQueryRequestUrl(businessDataObjectType: string, queryParms: ZgwnuBonitaBusinessDataQueryParms): string {\n        return this.resourceUrl + '/businessData/' + \n                this.configService.businessDataModelPackage + '.' + businessDataObjectType + \n                    '?' + queryParms.getUrlEncondedParms()\n    }\n\n    // Bonita Rest Api get Business Data from context\n    // --------------------------------------------------------------------------\n    //\n    // based on http://documentation.bonitasoft.com/?page=bpm-api#toc6\n    //\n    getBusinessDataFromContext(businessDataContext: ZgwnuBonitaBusinessDataContext, mappingParm?: ZgwnuBonitaDataMappingInterface): Observable<any> {\n        let mapping = this.getMapping(mappingParm)\n        return this.http.get(this.buildGetFromContextUrl(businessDataContext), this.configService.options)\n                        .map(mapping.mapResponse)\n                        .catch(this.handleResponseError)\n    }\n\n    protected buildGetFromContextUrl(businessDataContext: ZgwnuBonitaBusinessDataContext): string {\n        return this.configService.bonitaUrls.baseUrl + '/' + businessDataContext.link\n    }\n\n    private getMapping(mappingParm?: ZgwnuBonitaDataMappingInterface): ZgwnuBonitaDataMappingInterface {\n        if (mappingParm) {\n            return mappingParm\n        } else {\n            return this.mapping\n        }\n    }\n\n    // Bonita Rest Api get Business Data from context\n    // --------------------------------------------------------------------------\n    //    \n    // base on http://documentation.bonitasoft.com/?page=bdm-api#toc2\n    //\n    private getSingleBusinessDataReference(caseId: string, businessDataObjectType: string): Observable<ZgwnuSingleBusinessDataRefence> {\n        return this.getBusinessDataReference(caseId, businessDataObjectType)\n                    .map(this.mapSingleBusinessDataReference)\n                    .catch(this.handleResponseError)\n    }\n\n    private mapSingleBusinessDataReference(res: Response) {\n        let dataReference: ZgwnuSingleBusinessDataRefence = new ZgwnuSingleBusinessDataRefence(res.json())\n        return dataReference\n    }\n\n    private getMultipleBusinessDataReference(caseId: string, businessDataObjectType: string): Observable<ZgwnuMultipleBusinessDataRefence> {\n        return this.getBusinessDataReference(caseId, businessDataObjectType)\n                    .map(this.mapSingleBusinessDataReference)\n                    .catch(this.handleResponseError)\n    }\n\n    private mapMultipleBusinessDataReference(res: Response) {\n        let dataReference: ZgwnuMultipleBusinessDataRefence = new ZgwnuMultipleBusinessDataRefence(res.json())\n        return dataReference\n    }\n\n    private getBusinessDataReference(caseId: string, businessDataObjectType: string): Observable<any> {\n        return this.http.get(this.resourceUrl + '/businessDataReference/' + caseId + '/' + businessDataObjectType, this.configService.options)\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ZgwnuBonitaConfigService, },\n{type: Http, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}