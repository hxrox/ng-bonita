{"version":3,"sources":["../../src/authentication/zgwnu-bonita-authentication.service.ts"],"names":[],"mappings":"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","file":"zgwnu-bonita-authentication.service.js","sourceRoot":"","sourcesContent":["// ZaakgerichtWerken.nu Bonita Rest Api Authentication Service\n// --------------------------------------------------------------------------\n//\n// based on http://documentation.bonitasoft.com/?page=rest-api-overview#toc2\n//\n//\nimport { Injectable } from '@angular/core'\nimport { Http, Headers, RequestOptions, Response } from '@angular/http'\nimport { Router } from '@angular/router'\n\nimport { Observable } from 'rxjs/Observable'\nimport 'rxjs/add/operator/catch'\nimport 'rxjs/add/operator/map'\n\nimport { ZgwnuBonitaRestApiService } from '../rest-api/zgwnu-bonita-rest-api.service'\nimport { ZgwnuBonitaDataMappingInterface } from '../rest-api/zgwnu-bonita-data-mapping.interface'\nimport { ZgwnuBonitaConfigService } from '../rest-api/zgwnu-bonita-config.service'\nimport { ZgwnuBonitaCredentials } from './zgwnu-bonita-credentials'\nimport { ZgwnuBonitaSession } from '../rest-api/zgwnu-bonita-session'\nimport { ZgwnuBonitaSessionMapping } from '../rest-api/zgwnu-bonita-session-mapping'\nimport { ZgwnuBonitaResponse } from '../rest-api/zgwnu-bonita-response'\nimport { ZgwnuBonitaErrorResponse } from '../rest-api/zgwnu-bonita-error-response'\n\n\nexport class ZgwnuBonitaAuthenticationService extends ZgwnuBonitaRestApiService {\n    private readonly LOGIN_SERVICE_PATH = '/loginservice'\n    private readonly CURRENT_SESSION_RESOURCE_PATH = '/system/session/unusedid'\n\n    successResponse: ZgwnuBonitaResponse\n    errorResponse: ZgwnuBonitaErrorResponse\n\n    constructor(\n        private configService: ZgwnuBonitaConfigService,\n        private http: Http,\n        private router: Router)\n    { \n        super()\n        \n        // initialize authentication using current session\n        this.getCurrentSession()\n            .subscribe(\n                currentSession => configService.session = currentSession\n            )\n    }\n\n    private executeLogin(creds: ZgwnuBonitaCredentials): Observable<ZgwnuBonitaResponse> {\n        let credsUrlEncoded: string = 'username=' + creds.username + '&password=' + creds.password + '&redirect=false'\n        let headers: Headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' })\n        let options: RequestOptions = new RequestOptions({ headers: headers })\n        let postUrl: string = this.configService.bonitaUrls.baseUrl + this.LOGIN_SERVICE_PATH\n\n        return this.http.post(postUrl, credsUrlEncoded, options)\n                        .map(this.mapSuccessResponse)\n                        .catch(this.handleResponseError)\n    }\n\n    getCurrentSession(): Observable<ZgwnuBonitaSession> {\n        let sessionMapping: ZgwnuBonitaDataMappingInterface = new ZgwnuBonitaSessionMapping()\n        return this.http.get(this.configService.bonitaUrls.apiUrl + this.CURRENT_SESSION_RESOURCE_PATH, this.configService.options)\n                .map(sessionMapping.mapResponse)\n                .catch(this.handleResponseError)\n\n    }\n\n    login(creds: ZgwnuBonitaCredentials) {\n        this.executeLogin(creds)\n            .subscribe(\n                successResponse => {\n                    this.successResponse = successResponse\n                    this.getCurrentSession()\n                        .subscribe(\n                            session => {\n                                 if (creds.username == session.user_name) {\n                                     this.configService.session = session\n                                     if (creds.navigateTo) { this.router.navigate([creds.navigateTo]) }\n                                 }\n                            },\n                            errorResponse => this.errorResponse = errorResponse\n                        )    \n                },\n                errorResponse => this.errorResponse = errorResponse\n            )\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ZgwnuBonitaConfigService, },\n{type: Http, },\n{type: Router, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}