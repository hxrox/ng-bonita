{"version":3,"sources":["../../../src/bpm/task/zgwnu-bonita-bpm-task.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wDAAC;AACD,6EAA6E;AAC7E,EAAE;AACF,kEAAkE;AAClE,EAAE;AACF,EAAE;AACF,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAA;AAC3B,OAAO,EAAE,IAAA,EAAK,MAAO,eAAA,CAAA;AAGrB,OAAO,yBAAA,CAAA;AACP,OAAO,uBAAA,CAAA;AAEP,OAAO,EAAE,yBAAA,EAA0B,MAAO,8CAAA,CAAA;AAE1C,OAAO,EAAE,wBAAA,EAAyB,MAAO,4CAAA,CAAA;AAGzC,OAAO,EAAE,sBAAA,EAAuB,MAAO,6BAAA,CAAA;AAIvC;IAA+C,6CAAyB;IAIpE,mCACY,aAAuC,EACvC,IAAU;QAFtB,YAKI,iBAAO,SAEV;QANW,mBAAa,GAAb,aAAa,CAA0B;QACvC,UAAI,GAAJ,IAAI,CAAM;QALL,wBAAkB,GAAW,WAAW,CAAA;QASrD,KAAI,CAAC,eAAe,GAAG,aAAa,CAAC,UAAU,CAAC,MAAM,GAAG,KAAI,CAAC,kBAAkB,CAAA;;IACpF,CAAC;IAED,+CAAW,GAAX,UAAY,WAAmC;QAC3C,IAAI,WAAW,GAAoC,IAAI,sBAAsB,EAAE,CAAA;QAC/E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;aACzE,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC;aACjC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;IACpD,CAAC;IAEO,0DAAsB,GAA9B,UAA+B,WAAmC;QAC9D,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,GAAG,GAAG,WAAW,CAAC,mBAAmB,EAAE,CAAA;IACzE,CAAC;IAED,2CAAO,GAAP,UAAQ,MAAc;QAClB,IAAI,WAAW,GAAoC,IAAI,sBAAsB,EAAE,CAAA;QAC/E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,GAAG,GAAG,GAAG,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;aACpE,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC;aAC5B,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;IACpD,CAAC;IAEE,oCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,wCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,wBAAwB,GAAG;QAClC,EAAC,IAAI,EAAE,IAAI,GAAG;KACb,EAH6F,CAG7F,CAAC;IACF,gCAAC;CAvCD,AAuCC,CAvC8C,yBAAyB,GAuCvE;SAvCY,yBAAyB","file":"zgwnu-bonita-bpm-task.service.js","sourceRoot":"","sourcesContent":["// ZaakgerichtWerken.nu Bonita Rest Api BPM Task Service\n// --------------------------------------------------------------------------\n//\n// based on http://documentation.bonitasoft.com/?page=bpm-api#toc5\n//\n//\nimport { Injectable } from '@angular/core'\nimport { Http } from '@angular/http'\n\nimport { Observable } from 'rxjs/Observable'\nimport 'rxjs/add/operator/catch'\nimport 'rxjs/add/operator/map'\n\nimport { ZgwnuBonitaRestApiService } from '../../rest-api/zgwnu-bonita-rest-api.service'\nimport { ZgwnuBonitaDataMappingInterface } from '../../rest-api/zgwnu-bonita-data-mapping.interface'\nimport { ZgwnuBonitaConfigService } from '../../rest-api/zgwnu-bonita-config.service'\nimport { ZgwnuBonitaSearchParms } from '../zgwnu-bonita-search-parms'\nimport { ZgwnuBonitaTask } from './zgwnu-bonita-task'\nimport { ZgwnuBonitaTaskMapping } from './zgwnu-bonita-task-mapping'\nimport { ZgwnuBonitaResponse } from '../../rest-api/zgwnu-bonita-response'\n\n\nexport class ZgwnuBonitaBpmTaskService extends ZgwnuBonitaRestApiService {\n    private readonly TASK_RESOURCE_PATH: string = '/bpm/task'\n    private taskResourceUrl: string\n\n    constructor(\n        private configService: ZgwnuBonitaConfigService,\n        private http: Http\n    ) \n    { \n        super()\n        this.taskResourceUrl = configService.bonitaUrls.apiUrl + this.TASK_RESOURCE_PATH\n    }\n\n    searchTasks(searchParms: ZgwnuBonitaSearchParms): Observable<ZgwnuBonitaTask[]> {\n        let taskMapping: ZgwnuBonitaDataMappingInterface = new ZgwnuBonitaTaskMapping()\n        return this.http.get(this.buildTaskSearchRequest(searchParms), this.configService.options)\n                        .map(taskMapping.mapResponseArray)\n                        .catch(this.handleResponseError)\n    }\n\n    private buildTaskSearchRequest(searchParms: ZgwnuBonitaSearchParms): string {\n        return this.taskResourceUrl + '?' + searchParms.getUrlEncondedParms()\n    }\n\n    getTask(taskId: string): Observable<ZgwnuBonitaTask> {\n        let taskMapping: ZgwnuBonitaDataMappingInterface = new ZgwnuBonitaTaskMapping()\n        return this.http.get(this.taskResourceUrl + '/' + taskId, this.configService.options)\n                        .map(taskMapping.mapResponse)\n                        .catch(this.handleResponseError)\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ZgwnuBonitaConfigService, },\n{type: Http, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}