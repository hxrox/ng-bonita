{"version":3,"sources":["../../../src/bpm/process/zgwnu-bonita-bpm-process.service.ts"],"names":[],"mappings":"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","file":"zgwnu-bonita-bpm-process.service.js","sourceRoot":"","sourcesContent":["// ZaakgerichtWerken.nu Bonita Rest Api BPM Process Service\n// --------------------------------------------------------------------------\n//\n// based on http://documentation.bonitasoft.com/?page=bpm-api#toc28\n//\n//\nimport { Injectable } from '@angular/core'\nimport { Http, Response } from '@angular/http'\n\nimport { Observable } from 'rxjs/Observable'\nimport 'rxjs/add/operator/catch'\nimport 'rxjs/add/operator/map'\n\nimport { ZgwnuBonitaRestApiService } from '../../rest-api/zgwnu-bonita-rest-api.service'\nimport { ZgwnuBonitaUtils } from '../../rest-api/zgwnu-bonita-utils'\nimport { ZgwnuBonitaConfigService } from '../../rest-api/zgwnu-bonita-config.service'\nimport { ZgwnuBonitaSearchParms } from '../zgwnu-bonita-search-parms'\nimport { ZgwnuBonitaFileUploadResponse } from '../../file-upload/zgwnu-bonita-file-upload-response'\nimport { ZgwnuBonitaProcessDefinition } from './zgwnu-bonita-process-definition'\nimport { ZgwnuBonitaProcessDefinitionMapping } from './zgwnu-bonita-process-definition-mapping'\nimport { ZgwnuBonitaCreateCaseSuccessResponse } from './zgwnu-bonita-create-case-success-response'\nimport { ZgwnuBonitaDeployProcessDefinitionSuccessResponse } from './zgwnu-bonita-deploy-process-definition-success-response'\nimport { ZgwnuBonitaProcessUpdateInput } from './zgwnu-bonita-process-update-input'\nimport { ZgwnuBonitaProcessUpdateSuccessResponse } from './zgwnu-bonita-process-update-success-response'\n\n\nexport class ZgwnuBonitaBpmProcessService extends ZgwnuBonitaRestApiService {\n    private readonly RESOURCE_PATH: string = '/bpm/process'\n    private resourceUrl: string\n\n    constructor(\n        private configService: ZgwnuBonitaConfigService,\n        private http: Http\n    ) \n    { \n        super()\n\n        // configure resource urls\n        this.resourceUrl = configService.bonitaUrls.apiUrl + this.RESOURCE_PATH\n    }\n\n    searchProcessDefinitions(searchParms: ZgwnuBonitaSearchParms): Observable<ZgwnuBonitaProcessDefinition[]> {\n        let processDefinitionMapping: ZgwnuBonitaProcessDefinitionMapping = new ZgwnuBonitaProcessDefinitionMapping()\n        return this.http.get(this.buildSearchRequest(searchParms), this.configService.options)\n                        .map(processDefinitionMapping.mapResponseArray)\n                        .catch(this.handleResponseError)\n    }\n\n    private buildSearchRequest(searchParms: ZgwnuBonitaSearchParms): string {\n        return this.resourceUrl + '?' + searchParms.getUrlEncondedParms()\n    }\n\n    getProcessDefinition(processDefinitionId: string): Observable<ZgwnuBonitaProcessDefinition> {\n        let processDefinitionMapping: ZgwnuBonitaProcessDefinitionMapping = new ZgwnuBonitaProcessDefinitionMapping()\n        return this.http.get(this.resourceUrl + '/' + processDefinitionId, this.configService.options)\n                        .map(processDefinitionMapping.mapResponse)\n                        .catch(this.handleResponseError)\n    }\n\n    // Start a process using an instantiation contract\n    //\n    // based on: http://documentation.bonitasoft.com/?page=bpm-api#toc23\n    //\n    // Post URL template: ../API/bpm/process/:processId/instantiation\n    //\n    createCase(processId: string, contractValues: any): Observable<ZgwnuBonitaCreateCaseSuccessResponse> {\n        let postUrl: string = this.resourceUrl + '/' + processId + '/instantiation'\n        return this.http.post(postUrl, contractValues, this.configService.sendOptions)\n                        .map(this.mapCreateCaseSuccessResponse)\n                        .catch(this.handleResponseError)\n    }\n\n    private mapCreateCaseSuccessResponse(res: Response) {\n        let successResponse = new ZgwnuBonitaCreateCaseSuccessResponse()\n        successResponse.status = res.status\n        if (res.statusText) successResponse.statusText = res.statusText\n        successResponse.caseId = res.json().caseId\n        return successResponse\n    }\n\n    // Deploy a process definition\n    //\n    // based on: http://documentation.bonitasoft.com/?page=bpm-api#toc28\n    //\n    // Post URL template: ../API/bpm/process\n    //\n    deployProcessDefinition(processUploadResponse: ZgwnuBonitaFileUploadResponse): Observable<ZgwnuBonitaDeployProcessDefinitionSuccessResponse> {\n        let requestPayload: any = { \"fileupload\": processUploadResponse.tempPath }\n        return this.http.post(this.resourceUrl, requestPayload, this.configService.sendOptions)\n                        .map(this.mapDeployProcessDefinitionSuccessResponse)\n                        .catch(this.handleResponseError)\n    }\n\n    private mapDeployProcessDefinitionSuccessResponse(res: Response) {\n        let utils: ZgwnuBonitaUtils = new ZgwnuBonitaUtils()\n        let successResponse = new ZgwnuBonitaDeployProcessDefinitionSuccessResponse()\n        successResponse.status = res.status\n        if (res.statusText) successResponse.statusText = res.statusText\n        let body: any = res.json()\n        successResponse.id = body.id\n        successResponse.deploymentDate = utils.getDateValue(body.deploymentDate)\n        successResponse.description = body.description\n        successResponse.activationState = body.activationState\n        successResponse.name = body.name\n        successResponse.displayName = body.displayName\n        successResponse.actorinitiatorid = body.actorinitiatorid\n        successResponse.last_update_date = utils.getDateValue(body.last_update_date)\n        successResponse.configurationState = body.configurationState\n        successResponse.version = body.version\n        return successResponse\n    }\n\n    updateProcessDefinition(processDefinitionId: string, updateInput: ZgwnuBonitaProcessUpdateInput):  Observable<ZgwnuBonitaProcessUpdateSuccessResponse> {\n        return this.http.put(this.resourceUrl + '/' + processDefinitionId, updateInput, this.configService.sendOptions)\n                        .map(this.mapUpdateProcessDefinitionUpdateSuccessResponse)\n                        .catch(this.handleResponseError)        \n    }\n\n    private mapUpdateProcessDefinitionUpdateSuccessResponse(res: Response) {\n        let updateRes: ZgwnuBonitaProcessUpdateSuccessResponse = new ZgwnuBonitaProcessUpdateSuccessResponse()\n        updateRes.status = res.status\n        if (res.statusText) updateRes.statusText = res.statusText\n        return updateRes\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ZgwnuBonitaConfigService, },\n{type: Http, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}