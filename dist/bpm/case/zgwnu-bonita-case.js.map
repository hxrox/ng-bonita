{"version":3,"sources":["../../../src/bpm/case/zgwnu-bonita-case.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAA;AAEpE;IAEI,yBAAY,QAAa;QAErB,IAAM,KAAK,GAAG,IAAI,gBAAgB,EAAE,CAAA;QAEpC,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAA;QACrB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;QACrD,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAA;QAC/C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;QAC/C,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAA;QAC/C,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAA;QAC3B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAA;QACrC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAA;QACrC,IAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAC,mBAAmB,CAAA;QACvD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;QACrE,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;QACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;QACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;QACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;QACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;QACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;QACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;QACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;QACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;QACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAA;QAAC,CAAC;IAE3F,CAAC;IAuBL,sBAAC;AAAD,CAlDA,AAkDC,IAAA","file":"zgwnu-bonita-case.js","sourceRoot":"","sourcesContent":["import { ZgwnuBonitaUtils } from '../../rest-api/zgwnu-bonita-utils'\n\nexport class ZgwnuBonitaCase {\n\n    constructor(caseData: any)\n    {\n        const utils = new ZgwnuBonitaUtils()\n\n        this.id = caseData.id\n        this.end_date = utils.getDateValue(caseData.end_date)\n        this.failedFlowNodes = caseData.failedFlowNodes\n        this.start = utils.getDateValue(caseData.start)\n        this.activeFlowNodes = caseData.activeFlowNodes\n        this.state = caseData.state\n        this.rootCaseId = caseData.rootCaseId\n        this.started_by = caseData.started_by\n        this.processDefinitionId = caseData.processDefinitionId\n        this.last_update_date = utils.getDateValue(caseData.last_update_date)\n        if (caseData.searchIndex1Label) { this.searchIndex1Label = caseData.searchIndex1Label }\n        if (caseData.searchIndex2Label) { this.searchIndex2Label = caseData.searchIndex2Label }\n        if (caseData.searchIndex3Label) { this.searchIndex3Label = caseData.searchIndex2Label }\n        if (caseData.searchIndex4Label) { this.searchIndex4Label = caseData.searchIndex3Label }\n        if (caseData.searchIndex5Label) { this.searchIndex5Label = caseData.searchIndex4Label }\n        if (caseData.searchIndex1Value) { this.searchIndex1Value = caseData.searchIndex1Value }\n        if (caseData.searchIndex2Value) { this.searchIndex2Value = caseData.searchIndex2Value }\n        if (caseData.searchIndex3Value) { this.searchIndex3Value = caseData.searchIndex3Value }\n        if (caseData.searchIndex4Value) { this.searchIndex4Value = caseData.searchIndex4Value }\n        if (caseData.searchIndex5Value) { this.searchIndex5Value = caseData.searchIndex5Value }\n\n    }\n\n    id: string // the identifier of the case\n    end_date: Date // the date set when the case is closed\n    failedFlowNodes: number // count of failed flow nodes if parameter n=failedFlowNodes is given\n    startedBySubstitute: string // the identifier of the substitute user (as Process manager or Administrator) who started the process. It can be also the substitute user if d=startedBySubstitute is given.\n    start: Date // the starting date of the case\n    activeFlowNodes: number // count of active flow nodes if parameter n=activeFlowNodes is given\n    state: string // state: an enum that represent the state of the case, it can be INITIALIZING, STARTED, SUSPENDED, CANCELLED, ABORTED, COMPLETING, COMPLETED, ERROR, ABORTING\n    rootCaseId: string // the identifier of the container of the case\n    started_by: string // the identifier of the user who started the case\n    processDefinitionId: string // the identifier of the process related of the case\n    last_update_date: Date // the date of the last update done on the case\n    searchIndex1Label?: string // the 1st search index label (from 6.5, in Subscription editions only)\n    searchIndex2Label?: string // the 2nd search index label (from 6.5, in Subscription editions only)\n    searchIndex3Label?: string // the 3rd search index label (from 6.5, in Subscription editions only)\n    searchIndex4Label?: string // the 4th search index label (from 6.5, in Subscription editions only)\n    searchIndex5Label?: string // the 5th search index label (from 6.5, in Subscription editions only)\n    searchIndex1Value?: string // the 1st search index value (from 6.5, in Subscription editions only)\n    searchIndex2Value?: string // the 2nd search index value (from 6.5, in Subscription editions only)\n    searchIndex3Value?: string // the 3rd search index value (from 6.5, in Subscription editions only)\n    searchIndex4Value?: string // the 4th search index value (from 6.5, in Subscription editions only)\n    searchIndex5Value?: string // the 5th search index value (from 6.5, in Subscription editions only)\n}"]}